{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HOME Audits <u>OpenZeppelin - November 10, 2020</u> <u>OpenZeppelin - February 10, 2020</u> Ecosystem Links . Discord . Twitter . Github . Medium . Mailing List","title":"HOME"},{"location":"#home","text":"","title":"HOME"},{"location":"#audits","text":"<u>OpenZeppelin - November 10, 2020</u> <u>OpenZeppelin - February 10, 2020</u>","title":"Audits"},{"location":"#ecosystem-links","text":". Discord . Twitter . Github . Medium . Mailing List","title":"Ecosystem Links"},{"location":"API/","text":"Deposit `contract` ViaVault.sol `method ` deposit( uint256 amountIn0, uint256 amountIn1) external onlyActive `input params` uint256 amountIn0 -- amount in token0 uint256 amountIn1 -- amount in token1 `event` event Deposit( address indexed sender, uint256 shares, uint256 amount0, uint256 amount1 ); `go example` /scripts/project/testVault.go func Deposit() Withdraw `contract` ViaVault.sol `method ` withdraw( uint8 percent) external `input params` uint8 percent -- percentage of user's total shares. 1 - 100 `event` event PendingWithdraw(msg.sender, pending) pending = true withdraw is put in pending list until next rebalance. pending = false withdraw has been processed. if pending = false, another event will be emitted: event Withdraw( address indexed sender, uint256 shares, uint256 amount0, uint256 amount1); ); `go example` /scripts/project/testVault.go func Withdraw() Rebalance `contract` VaultStrategy.sol `method ` function rebalance(int24 newLow, int24 newHigh) external onlyActive `input params` int24 newLow -- new tick low int24 newHigh -- new tick high `event` event Rebalance(address indexed,uint256 u0, uint256 u1, uint256 c0, uint256 c1); ); `go example` /scripts/project/testVault.go func Rebalance()","title":"API"},{"location":"API/#deposit","text":"`contract` ViaVault.sol `method ` deposit( uint256 amountIn0, uint256 amountIn1) external onlyActive `input params` uint256 amountIn0 -- amount in token0 uint256 amountIn1 -- amount in token1 `event` event Deposit( address indexed sender, uint256 shares, uint256 amount0, uint256 amount1 ); `go example` /scripts/project/testVault.go func Deposit()","title":"Deposit"},{"location":"API/#withdraw","text":"`contract` ViaVault.sol `method ` withdraw( uint8 percent) external `input params` uint8 percent -- percentage of user's total shares. 1 - 100 `event` event PendingWithdraw(msg.sender, pending) pending = true withdraw is put in pending list until next rebalance. pending = false withdraw has been processed. if pending = false, another event will be emitted: event Withdraw( address indexed sender, uint256 shares, uint256 amount0, uint256 amount1); ); `go example` /scripts/project/testVault.go func Withdraw()","title":"Withdraw"},{"location":"API/#rebalance","text":"`contract` VaultStrategy.sol `method ` function rebalance(int24 newLow, int24 newHigh) external onlyActive `input params` int24 newLow -- new tick low int24 newHigh -- new tick high `event` event Rebalance(address indexed,uint256 u0, uint256 u1, uint256 c0, uint256 c1); ); `go example` /scripts/project/testVault.go func Rebalance()","title":"Rebalance"},{"location":"Admin/","text":"Admin Menu Features Roles - who can share protocol fees Admin -- owner of vault factory contract. Creator -- owner of strategy creator. Motivator -- address of whom to keep smart contract triggering. i.e. clicking rebalance button. sending alert etc Protocol -- collect fees Fee rates - Functions SetAdmin - set new admit. SetPortionRate - set new admit. SetPortionRate - set new admit.","title":"Admin"},{"location":"Admin/#admin-menu","text":"","title":"Admin Menu"},{"location":"Admin/#features","text":"Roles - who can share protocol fees Admin -- owner of vault factory contract. Creator -- owner of strategy creator. Motivator -- address of whom to keep smart contract triggering. i.e. clicking rebalance button. sending alert etc Protocol -- collect fees Fee rates -","title":"Features"},{"location":"Admin/#functions","text":"SetAdmin - set new admit. SetPortionRate - set new admit. SetPortionRate - set new admit.","title":"Functions"},{"location":"Backend/","text":"v2.0 ----- Contracts ----- ViaVault.sol . funds vault. . manage funds deposit/withdraw and calculate shares VaultStrategy.sol . manage strategies . manage rebalance VaultFactory.sol . administration of vaults and strategies . vault and strategy registration . set/get admin and team . change vault status . call deployer to create vault in air ----- Public features ----- VaultFactory public properties mapping (address => mapping(address =>uint )) public stat; // 1: active ; 2 pending; 3 emergency ; 4 abandoned mapping (address => address) public pairs; // strategy <-> vault VaultReg[] public vaults; struct VaultReg { address strategy; address vault; } public methods function getAdmin() external view returns(address); function getTeam() external view returns(address); function setTeam(address _team) external; function changeStat(address _strategy, address _vault, uint _stat) external; // change status of vault and strategy function getCount() external; // get stored vaults array size function getStat(address) external view returns(uint); // get status of vault and strategy. 1 = active function getPair0(address _addr) external view returns(address); // get vault or strategy address by given strategy or vault address ViaVault public properties address public immutable factory; // vaultFactory address public immutable token0; // token0 address public immutable token1; // token1 uint256 public vaultCap; // maxTotalSupply uint256 public individualCap; // max Individual supply : todo Withdrawal[] public wds; // pending withdrawal array struct Withdrawal { address recipient; uint8 percent; } public methods function deposit( uint256 amountIn0, uint256 amountIn1) external function withdraw( uint8 percent ) external nonReentrant returns (uint256 amount0, uint256 amount1) function setVaultCap(uint256 newMax) external onlyAdmin function setIndividualCap(uint256 newMax) external onlyAdmin function checkCap(uint256 amount0,uint256 amount1) public view returns(uint256) function sweep( address _token, uint256 amount) external onlyAdmin VaultStrategy public properties address public creator; // the strategy creator. if it's deployed by admin team, creator is admin team address public immutable factory; // the vault factory address public immutable _WETH; address public immutable token0; // underlying token0 address public immutable token1; // underlying token1 address public protocol; // where fee cuts to protocol ICEth public immutable _CETH; IUniswapV3Pool public immutable pool; // get by uni factory, token0, token1, feetier uint128 public immutable quoteamount; // base amount for calculating price, based on token0 decimal, ie: 1e18 for eth, 1e8 for wbtc uint8 public uniPortion; // uniswap portion ratio uint8 public compPortion; // compound portion ratio uint8 public protocolFeeRate; // 0 - 20% of profit uint8 public motivatorFeeRate; // 0- 10% from profit for keeping system running by press buttons uint32 public twapDuration; // oracle twap durantion int24 public tickSpacing; int24 public cLow; int24 public cHigh; int24 public maxTwapDeviation; // for twap mapping (address => address) public _CTOKEN; mapping (address => uint8) public Decimals; // to be working mapping (uint => address[] ) public motivator; // who helped to triggering buttons e.g. motivator[1].push( address ) 1=rebalance address[] public motivators; public methods function rebalance(int24 newLow, int24 newHigh) external nonReentrant function setMaxTwapDeviation(int24 _maxTwapDeviation) external onlyCreator function setTwapDuration(uint32 _twapDuration) external onlyCreator function setPortionRatio(uint8 uni, uint8 comp) external onlyCreator { function alloc() public returns ( bool ) function calcShares( uint256 totalSupply, uint256 amountIn0, uint256 amountIn1) public returns(uint256 shares, uint256 amount0, uint256 amount1) function getUniAmounts(int24 tickLower, int24 tickUpper) public view returns (uint256 amount0, uint256 amount1) function getPrice() public view returns(uint256) -- get price at twap ----- Events ----- 1 2 3 ----- Scripts ----- 1 2 3","title":"<p><strong>Backend</strong></p>"},{"location":"Backend/#v20","text":"","title":"v2.0"},{"location":"Backend/#-contracts-","text":"","title":"----- Contracts -----"},{"location":"Backend/#viavaultsol","text":". funds vault. . manage funds deposit/withdraw and calculate shares","title":"ViaVault.sol"},{"location":"Backend/#vaultstrategysol","text":". manage strategies . manage rebalance","title":"VaultStrategy.sol"},{"location":"Backend/#vaultfactorysol","text":". administration of vaults and strategies . vault and strategy registration . set/get admin and team . change vault status . call deployer to create vault in air","title":"VaultFactory.sol"},{"location":"Backend/#-public-features-","text":"","title":"----- Public features -----"},{"location":"Backend/#vaultfactory","text":"","title":"VaultFactory"},{"location":"Backend/#public-properties","text":"mapping (address => mapping(address =>uint )) public stat; // 1: active ; 2 pending; 3 emergency ; 4 abandoned mapping (address => address) public pairs; // strategy <-> vault VaultReg[] public vaults; struct VaultReg { address strategy; address vault; }","title":"public properties"},{"location":"Backend/#public-methods","text":"function getAdmin() external view returns(address); function getTeam() external view returns(address); function setTeam(address _team) external; function changeStat(address _strategy, address _vault, uint _stat) external; // change status of vault and strategy function getCount() external; // get stored vaults array size function getStat(address) external view returns(uint); // get status of vault and strategy. 1 = active function getPair0(address _addr) external view returns(address); // get vault or strategy address by given strategy or vault address","title":"public methods"},{"location":"Backend/#viavault","text":"","title":"ViaVault"},{"location":"Backend/#public-properties_1","text":"address public immutable factory; // vaultFactory address public immutable token0; // token0 address public immutable token1; // token1 uint256 public vaultCap; // maxTotalSupply uint256 public individualCap; // max Individual supply : todo Withdrawal[] public wds; // pending withdrawal array struct Withdrawal { address recipient; uint8 percent; }","title":"public properties"},{"location":"Backend/#public-methods_1","text":"function deposit( uint256 amountIn0, uint256 amountIn1) external function withdraw( uint8 percent ) external nonReentrant returns (uint256 amount0, uint256 amount1) function setVaultCap(uint256 newMax) external onlyAdmin function setIndividualCap(uint256 newMax) external onlyAdmin function checkCap(uint256 amount0,uint256 amount1) public view returns(uint256) function sweep( address _token, uint256 amount) external onlyAdmin","title":"public methods"},{"location":"Backend/#vaultstrategy","text":"","title":"VaultStrategy"},{"location":"Backend/#public-properties_2","text":"address public creator; // the strategy creator. if it's deployed by admin team, creator is admin team address public immutable factory; // the vault factory address public immutable _WETH; address public immutable token0; // underlying token0 address public immutable token1; // underlying token1 address public protocol; // where fee cuts to protocol ICEth public immutable _CETH; IUniswapV3Pool public immutable pool; // get by uni factory, token0, token1, feetier uint128 public immutable quoteamount; // base amount for calculating price, based on token0 decimal, ie: 1e18 for eth, 1e8 for wbtc uint8 public uniPortion; // uniswap portion ratio uint8 public compPortion; // compound portion ratio uint8 public protocolFeeRate; // 0 - 20% of profit uint8 public motivatorFeeRate; // 0- 10% from profit for keeping system running by press buttons uint32 public twapDuration; // oracle twap durantion int24 public tickSpacing; int24 public cLow; int24 public cHigh; int24 public maxTwapDeviation; // for twap mapping (address => address) public _CTOKEN; mapping (address => uint8) public Decimals; // to be working mapping (uint => address[] ) public motivator; // who helped to triggering buttons e.g. motivator[1].push( address ) 1=rebalance address[] public motivators;","title":"public properties"},{"location":"Backend/#public-methods_2","text":"function rebalance(int24 newLow, int24 newHigh) external nonReentrant function setMaxTwapDeviation(int24 _maxTwapDeviation) external onlyCreator function setTwapDuration(uint32 _twapDuration) external onlyCreator function setPortionRatio(uint8 uni, uint8 comp) external onlyCreator { function alloc() public returns ( bool ) function calcShares( uint256 totalSupply, uint256 amountIn0, uint256 amountIn1) public returns(uint256 shares, uint256 amount0, uint256 amount1) function getUniAmounts(int24 tickLower, int24 tickUpper) public view returns (uint256 amount0, uint256 amount1) function getPrice() public view returns(uint256) -- get price at twap","title":"public methods"},{"location":"Backend/#-events-","text":"","title":"----- Events -----"},{"location":"Backend/#1","text":"","title":"1"},{"location":"Backend/#2","text":"","title":"2"},{"location":"Backend/#3","text":"","title":"3"},{"location":"Backend/#-scripts-","text":"","title":"----- Scripts -----"},{"location":"Backend/#1_1","text":"","title":"1"},{"location":"Backend/#2_1","text":"","title":"2"},{"location":"Backend/#3_1","text":"","title":"3"},{"location":"Frontend/","text":"","title":"<p><b>Frontend</b></p>"},{"location":"User/","text":"User Menu Deposit - choose vault - strategy approve assets supply amount of tokens for a pair or single tokens. Withdraw - select percentage of shares to redeem for. from 0% - 100% click withdraw button -- it will be pending unitl next rebalance (varies depending on strategy) funds will be sent directly to user's wallet without further action. Motivation - rebalance button on user side (can be turned off on admin side) Offered by the strategy creator or the team to trigger the smart contract.","title":"User"},{"location":"User/#user-menu","text":"Deposit - choose vault - strategy approve assets supply amount of tokens for a pair or single tokens. Withdraw - select percentage of shares to redeem for. from 0% - 100% click withdraw button -- it will be pending unitl next rebalance (varies depending on strategy) funds will be sent directly to user's wallet without further action. Motivation - rebalance button on user side (can be turned off on admin side) Offered by the strategy creator or the team to trigger the smart contract.","title":"User Menu"},{"location":"_note/","text":"install markdocs pip install mkdocs - install from cmd run client in cmd mkdocs serve - http://127.0.0.1:8000 build a website mkdocs build - a 'site' folder is created as ready for deploy referal mkdocs - https://mkdocs-like-code.readthedocs.io/zh_CN/latest/ markdown syntax - https://www.markdownguide.org/basic-syntax/ SAMPLES ~~\u8981\u5220\u9664\u7684\u6587\u672c~~ sub-Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. sub-sub-Commands mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. sub-sub-Commands mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. mcdocs \u8fd8\u662f\u633a\u6709\u8da3\u7684shide","title":"<p><b>Use Doc</b></p>"},{"location":"_note/#install-markdocs","text":"pip install mkdocs - install from cmd","title":"install markdocs"},{"location":"_note/#run-client-in-cmd","text":"mkdocs serve - http://127.0.0.1:8000","title":"run client in cmd"},{"location":"_note/#build-a-website","text":"mkdocs build - a 'site' folder is created as ready for deploy","title":"build a website"},{"location":"_note/#referal","text":"mkdocs - https://mkdocs-like-code.readthedocs.io/zh_CN/latest/ markdown syntax - https://www.markdownguide.org/basic-syntax/","title":"referal"},{"location":"_note/#samples","text":"~~\u8981\u5220\u9664\u7684\u6587\u672c~~","title":"SAMPLES"},{"location":"_note/#sub-commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server.","title":"sub-Commands"},{"location":"_note/#sub-sub-commands","text":"mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"sub-sub-Commands"},{"location":"_note/#sub-sub-commands_1","text":"mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"sub-sub-Commands"},{"location":"_note/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"_note/#mcdocs-shide","text":"","title":"mcdocs \u8fd8\u662f\u633a\u6709\u8da3\u7684shide"},{"location":"contracts/","text":"Vialend Solidity Contracts VaultFactory.sol VaultStrategy.sol ViaVault.sol VaultBridge contract address: - v1.x 0xb6F0049e37D32dED0ED2FAEeE7b69930FA49A879 - v2.x 0x428EeA0B87f8E0f5653155057f58aaaBb667A3ec getAddress - function getAddress (uint ind) external view returns( address) - inputs 0: factory x: vault address ie: 1: weth/dai 0.05% 2: weth/usdc 0.3% .... - returns vault address or address(0): invalid input number setAddress - function setAddress (address newAddress, uint ind ) external onlyOwner - Set address setPermit - function setPermit (address addr, uint level ) external onlyOwner - Set admin 1: admin 0/other: non-admin getPermit - - function getPermit(address addr ) external view returns(uint) - get admin access level - returns 1: if address is admin 0: non-admin","title":"Vialend Solidity Contracts"},{"location":"contracts/#vialend-solidity-contracts","text":"","title":"Vialend Solidity Contracts"},{"location":"contracts/#vaultfactorysol","text":"","title":"VaultFactory.sol"},{"location":"contracts/#vaultstrategysol","text":"","title":"VaultStrategy.sol"},{"location":"contracts/#viavaultsol","text":"","title":"ViaVault.sol"},{"location":"contracts/#vaultbridge","text":"contract address: - v1.x 0xb6F0049e37D32dED0ED2FAEeE7b69930FA49A879 - v2.x 0x428EeA0B87f8E0f5653155057f58aaaBb667A3ec getAddress - function getAddress (uint ind) external view returns( address) - inputs 0: factory x: vault address ie: 1: weth/dai 0.05% 2: weth/usdc 0.3% .... - returns vault address or address(0): invalid input number setAddress - function setAddress (address newAddress, uint ind ) external onlyOwner - Set address setPermit - function setPermit (address addr, uint level ) external onlyOwner - Set admin 1: admin 0/other: non-admin getPermit - - function getPermit(address addr ) external view returns(uint) - get admin access level - returns 1: if address is admin 0: non-admin","title":"VaultBridge"},{"location":"design/","text":"DESIGN Things to consider where to deploy - ethereum mainnet, L2, polygon.... roles - Governance, admin, strategy creator, user . \u67b6\u6784\u8bbe\u8ba1 / Infrastructure Design \u5b9e\u73b0\u7684\u7b56\u7565 / Implementation Strategies \u5404\u79cd\u5229\u5f0a\u6743\u8861\u548c\u5177\u4f53\u51b3\u7b56 / Various trade-offs and specific decisions where to deploy - ethereum mainnet, L2, polygon.... roles - Governance, admin, strategy creator, user . \u66ff\u4ee3\u65b9\u6848 / Alternative implementation plan \u5404\u79cd\u65b9\u6848\u7684\u4f18\u7f3a\u70b9 / Advantages and disadvantages of various solutions","title":"DESIGN"},{"location":"design/#design","text":"","title":"DESIGN"},{"location":"design/#things-to-consider","text":"where to deploy - ethereum mainnet, L2, polygon.... roles - Governance, admin, strategy creator, user .","title":"Things to consider"},{"location":"design/#infrastructure-design","text":"","title":"\u67b6\u6784\u8bbe\u8ba1  / Infrastructure Design"},{"location":"design/#implementation-strategies","text":"","title":"\u5b9e\u73b0\u7684\u7b56\u7565 / Implementation Strategies"},{"location":"design/#various-trade-offs-and-specific-decisions","text":"where to deploy - ethereum mainnet, L2, polygon.... roles - Governance, admin, strategy creator, user .","title":"\u5404\u79cd\u5229\u5f0a\u6743\u8861\u548c\u5177\u4f53\u51b3\u7b56 / Various trade-offs and specific decisions"},{"location":"design/#alternative-implementation-plan","text":"","title":"\u66ff\u4ee3\u65b9\u6848 / Alternative implementation plan"},{"location":"design/#advantages-and-disadvantages-of-various-solutions","text":"","title":"\u5404\u79cd\u65b9\u6848\u7684\u4f18\u7f3a\u70b9 / Advantages and disadvantages of various solutions"},{"location":"dev-note/","text":"install solc windows / linux / WSL - ubuntu >>>>>>>>>>>>>>>>> #windows downlowd solc package https://github.com/ethereum/solidity/releases #linux / wsl `solc --version` -Display the currently solc versions: `solc-select versions` -Display the currently installed versions: `solc-select install` - check Available version Available versions to install: 0.3.6 0.4.0 ... 0.8.0 0.8.1 `solc-select install 0.8.10` - install version 0.8.10 Installing '0.8.10'... Version '0.8.10' installed. `solc-select use 0.8.10` - change solc version to use 0.8.10 install Go on WSL / ubuntu >>>>>>>>>>>>>>>>> download go v1.17.3 from https://go.dev/doc/install in wsl: sudo apt-get remove golang-go ** move or copy go package to $home dir cd $home cp /mnt/c/User/xdotk/downloads/xxxx.tar.gz ./ sudo apt autoremove sudo tar -xvf go1.17.3.linux-amd64.tar.gz sudo mv go /usr/local export GOROOT=/usr/local/go export GOPATH=$HOME/go export PATH=$GOPATH/bin:$GOROOT/bin:$PATH source ~/.profile go version install abigen 1.10.14 on wsl / ubuntu >>>>>>>>>>>>>>>>> https://geth.ethereum.org/docs/install-and-build/installing-geth#install-on-ubuntu-via-ppas sudo add-apt-repository -y ppa:ethereum/ethereum sudo apt-get update sudo apt-get install ethereum /usr/bin/abigen --version usage: /usr/bin/abigen --abi=../build/test.abi --bin=../build/test.bin --pkg=api --out=../deploy/test/test.go","title":"Dev note"},{"location":"events/","text":"EVENT Use Events project.Event(contract address, eventname, block_from, block_end) Related scripts * `/scripts/project/events.go` - all event implementation files.... * `/scripts/auto/main.event.go` - event test Events `Deposit` - by ViaVault `Withdraw` - by ViaVault `MintFees` - by ViaVault `CreatedVault(address _this, address sender, address strategy, address vault);` - by VaultFactory","title":"EVENT"},{"location":"events/#event","text":"","title":"EVENT"},{"location":"events/#use-events","text":"project.Event(contract address, eventname, block_from, block_end)","title":"Use Events"},{"location":"events/#related-scripts","text":"* `/scripts/project/events.go` - all event implementation files.... * `/scripts/auto/main.event.go` - event test","title":"Related scripts"},{"location":"events/#events","text":"`Deposit` - by ViaVault `Withdraw` - by ViaVault `MintFees` - by ViaVault `CreatedVault(address _this, address sender, address strategy, address vault);` - by VaultFactory","title":"Events"},{"location":"gas/","text":"Gas setting on test net auth.GasLimit = 6721975 -- in gwei auth.GasPrice = 2gwei -- 1 gwei = 1e9 wei, 2 gwei = 2000000000 wei basic cost based on test net settings: (mainnet may need 50x ) 1. (template) deploy vault deployer 2210275 2. (template) deploy strategy deployer 4623309 3. (template) deploy factory: 699464 4. factory create strategy + vault : 5944202 total gas: = 13,477,250 .......................Deploy VaultDeployer. .................. [tx: 0x8b4601bf538eba392adc9fbd477e65bd8b1d01959437db1ce769d3f5430c6272] [BlockNumber: 6116609] [Status: SUCCESS] [CumulativeGasUsed: 2344928] [GasUsed: 2210275] .......................Deploy StratDeployer. .................. [tx: 0x486b2991ef883ec7a6530812eb4626930d6d3df7c522ba05f7c6cbbcfbac64b9] [BlockNumber: 6116610] [Status: SUCCESS] [CumulativeGasUsed: 5023843] [GasUsed: 4623309] .......................Factory Vault. -- deploy strategy and vault together by factory [tx: 0xd4a32863e3fdb0c2939ad7c2ca4a7dec4793c77d88f60a4e86b331e003c99753] [BlockNumber: 6116612] [Status: SUCCESS] [CumulativeGasUsed: 5965202] [GasUsed: 5944202] .......................Deploy VaultFactory. .................. [tx: 0xf727a6f86fee8f68dd90d950d1ac830ed27833dff9ba6c0a375ed5261dbefae8] [BlockNumber: 6116611] [Status: SUCCESS] [CumulativeGasUsed: 925668] [GasUsed: 699464] .........Deposit......... [Aprollowance ] -- Approve [tx: 0x287653450a35182a501e3de3f803fdd9ad9c58a288ad8f6f854fa47a34a1a9d3] [BlockNumber: 6116621] [Status: SUCCESS] [CumulativeGasUsed: 242523] [GasUsed: 46111] [deposit tx: %s 0x6f6943cddb053f22832bfa735e9c93ba5e338db6063481f43d08d05b31a6a71b] [BlockNumber: 6116623] [Status: SUCCESS] [CumulativeGasUsed: 367752] [GasUsed: 283752] .........Withdraw......... [withdraw tx: 0x51e8abe94334ab0de3fa74b4af6a1bfc7d4893b88d8f971ef4d4b2c903edf3dc] [BlockNumber: 6116627] [Status: SUCCESS] [CumulativeGasUsed: 313156] [GasUsed: 203367] .........Rebalance New......... [tx: 0x203f733ddfa633dd67cddad5c446b3f9463f9eb6dd2a192600f9aaf6201fa15e] [BlockNumber: 6116624] [Status: SUCCESS] [CumulativeGasUsed: 1471608] [GasUsed: 495838] .........Emergency withdraw , burn all positions and send fund back to users......... [emergency tx: 0x08836b1449533f46a558be4e0f76249f370abe7a1a8b54d05a0dfbfc0efe8f09] [BlockNumber: 6117238] [Status: SUCCESS] [CumulativeGasUsed: 1273971] [GasUsed: 375454] if fail: [emergency tx: 0x5d9857637d0fe99f5e674a43fbc1228f9b6019be70b99435dd264807aa41fc99] [BlockNumber: 6116451] [Status: FAIL] [CumulativeGasUsed: 29393] [GasUsed: 29393] Compare with single deploy 1. deploy vault 2210275 2. deploy strategy 4623309 3. deploy factory: 699464 4. register to factory: 299464 total gas: = 7,832,512 .......................Deploy Strat by Go. .................. [strat address: 0x7ffE86c23117A9809941D5f693C9fCb9aBB3a998] [tx: 0x3d2cfd3af756a5095beef1b9d67f16e4a7437de2fcff1053b09543dc31ca3f1e] [BlockNumber: 6116446] [Status: SUCCESS] [CumulativeGasUsed: 4199822] [GasUsed: 4157822] .......................Deploy Vault by Go. .................. [tx: 0x03b2e33fb798c5c325f65cd2bdedb26489f9a00db012d5ebed6e1dd296bd351f] [BlockNumber: 6114598] [Status: SUCCESS] [CumulativeGasUsed: 2562972] [GasUsed: 2341105] .......................Deploy VaultFactory. .................. VaultFactory address: 0xa93a4e530AdB28adB4BED52eD189B0d19C7553d7 [tx: 0x2f3e91964f6df531d5f02f9acf848e41735ff86aedca86f120ee7cc6e84b8252] [BlockNumber: 6114601] [Status: SUCCESS] [CumulativeGasUsed: 1111133] [GasUsed: 625925]","title":"Gas setting on test net"},{"location":"gas/#gas-setting-on-test-net","text":"auth.GasLimit = 6721975 -- in gwei auth.GasPrice = 2gwei -- 1 gwei = 1e9 wei, 2 gwei = 2000000000 wei","title":"Gas setting on test net"},{"location":"gas/#basic-cost-based-on-test-net-settings-mainnet-may-need-50x","text":"1. (template) deploy vault deployer 2210275 2. (template) deploy strategy deployer 4623309 3. (template) deploy factory: 699464 4. factory create strategy + vault : 5944202 total gas: = 13,477,250","title":"basic cost based on test net settings: (mainnet may need 50x )"},{"location":"gas/#deploy-vaultdeployer","text":"[tx: 0x8b4601bf538eba392adc9fbd477e65bd8b1d01959437db1ce769d3f5430c6272] [BlockNumber: 6116609] [Status: SUCCESS] [CumulativeGasUsed: 2344928] [GasUsed: 2210275]","title":".......................Deploy VaultDeployer. .................."},{"location":"gas/#deploy-stratdeployer","text":"[tx: 0x486b2991ef883ec7a6530812eb4626930d6d3df7c522ba05f7c6cbbcfbac64b9] [BlockNumber: 6116610] [Status: SUCCESS] [CumulativeGasUsed: 5023843] [GasUsed: 4623309]","title":".......................Deploy StratDeployer. .................."},{"location":"gas/#factory-vault-deploy-strategy-and-vault-together-by-factory","text":"[tx: 0xd4a32863e3fdb0c2939ad7c2ca4a7dec4793c77d88f60a4e86b331e003c99753] [BlockNumber: 6116612] [Status: SUCCESS] [CumulativeGasUsed: 5965202] [GasUsed: 5944202]","title":".......................Factory Vault. -- deploy strategy and vault together by factory"},{"location":"gas/#deploy-vaultfactory","text":"[tx: 0xf727a6f86fee8f68dd90d950d1ac830ed27833dff9ba6c0a375ed5261dbefae8] [BlockNumber: 6116611] [Status: SUCCESS] [CumulativeGasUsed: 925668] [GasUsed: 699464]","title":".......................Deploy VaultFactory. .................."},{"location":"gas/#deposit","text":"[Aprollowance ] -- Approve [tx: 0x287653450a35182a501e3de3f803fdd9ad9c58a288ad8f6f854fa47a34a1a9d3] [BlockNumber: 6116621] [Status: SUCCESS] [CumulativeGasUsed: 242523] [GasUsed: 46111] [deposit tx: %s 0x6f6943cddb053f22832bfa735e9c93ba5e338db6063481f43d08d05b31a6a71b] [BlockNumber: 6116623] [Status: SUCCESS] [CumulativeGasUsed: 367752] [GasUsed: 283752]","title":".........Deposit........."},{"location":"gas/#withdraw","text":"[withdraw tx: 0x51e8abe94334ab0de3fa74b4af6a1bfc7d4893b88d8f971ef4d4b2c903edf3dc] [BlockNumber: 6116627] [Status: SUCCESS] [CumulativeGasUsed: 313156] [GasUsed: 203367]","title":".........Withdraw........."},{"location":"gas/#rebalance-new","text":"[tx: 0x203f733ddfa633dd67cddad5c446b3f9463f9eb6dd2a192600f9aaf6201fa15e] [BlockNumber: 6116624] [Status: SUCCESS] [CumulativeGasUsed: 1471608] [GasUsed: 495838]","title":".........Rebalance New........."},{"location":"gas/#emergency-withdraw-burn-all-positions-and-send-fund-back-to-users","text":"[emergency tx: 0x08836b1449533f46a558be4e0f76249f370abe7a1a8b54d05a0dfbfc0efe8f09] [BlockNumber: 6117238] [Status: SUCCESS] [CumulativeGasUsed: 1273971] [GasUsed: 375454] if fail: [emergency tx: 0x5d9857637d0fe99f5e674a43fbc1228f9b6019be70b99435dd264807aa41fc99] [BlockNumber: 6116451] [Status: FAIL] [CumulativeGasUsed: 29393] [GasUsed: 29393]","title":".........Emergency withdraw , burn all positions and send fund back to users........."},{"location":"gas/#compare-with-single-deploy","text":"1. deploy vault 2210275 2. deploy strategy 4623309 3. deploy factory: 699464 4. register to factory: 299464 total gas: = 7,832,512","title":"Compare with single deploy"},{"location":"gas/#deploy-strat-by-go","text":"[strat address: 0x7ffE86c23117A9809941D5f693C9fCb9aBB3a998] [tx: 0x3d2cfd3af756a5095beef1b9d67f16e4a7437de2fcff1053b09543dc31ca3f1e] [BlockNumber: 6116446] [Status: SUCCESS] [CumulativeGasUsed: 4199822] [GasUsed: 4157822]","title":".......................Deploy Strat by Go. .................."},{"location":"gas/#deploy-vault-by-go","text":"[tx: 0x03b2e33fb798c5c325f65cd2bdedb26489f9a00db012d5ebed6e1dd296bd351f] [BlockNumber: 6114598] [Status: SUCCESS] [CumulativeGasUsed: 2562972] [GasUsed: 2341105]","title":".......................Deploy Vault by Go. .................."},{"location":"gas/#deploy-vaultfactory_1","text":"VaultFactory address: 0xa93a4e530AdB28adB4BED52eD189B0d19C7553d7 [tx: 0x2f3e91964f6df531d5f02f9acf848e41735ff86aedca86f120ee7cc6e84b8252] [BlockNumber: 6114601] [Status: SUCCESS] [CumulativeGasUsed: 1111133] [GasUsed: 625925]","title":".......................Deploy VaultFactory. .................."},{"location":"integration/","text":"COMPOUND UNISWAP OPYN SQUEETH https://github.com/opynfinance/Opyn-GitBooks-Docs/blob/master/otoken.md","title":"Integration"},{"location":"integration/#compound","text":"","title":"COMPOUND"},{"location":"integration/#uniswap","text":"","title":"UNISWAP"},{"location":"integration/#opyn-squeeth","text":"https://github.com/opynfinance/Opyn-GitBooks-Docs/blob/master/otoken.md","title":"OPYN SQUEETH"},{"location":"scripts/","text":"Deploy vault call factory contract to generate two smart contracts -- strategy address -- vault address go script: parameters: contracts[10] -- 10 contract addresses see below vaultCap -- vault tvl limit in USD or USDC individualCap -- individual capacity in USD or USDC uniPortionRate -- uniswap v3 portion rate, 0 - 100 compPortionRate -- compound PortionRate , 0 - 100 creatorFee -- fee cut for creator feetier -- uniswap pool feetier quoteAmount -- 1 token0 in its decimal. i.e. if token0 is weth, 1e18 is the value _stratategyDeployer := Cfg.STRAT_DEPLOYER -- previously deployed by stratDeployer() _vaultDeployer := Cfg.VAULT_DEPLOYER -- previously deployed by vaultDeplyer() contracts := [10]common.Address{ protocolAddr, // an address that will take the protocol fees reserve, WETH, CETH, CTOKEN0, CTOKEN1, TokenA, TokenB, _stratategyDeployer, _vaultDeployer, } smart contract method to generate the vault and strategy: go: factoryContract.CreateVault(Auth, contracts, vaultCap, individualCap, uniPortionRate, compPortionRate, creatorFee, feetier, quoteAmount ) View vaults registery solidity: VaultFactory.sol: struct VaultReg { address strategy; address vault; } VaultReg[] public vaults; go: func ViewVaults() count, _ := facotryInstance.GetCount(&bind.CallOpts{}) i := count.Int64() for i > 0 { i-- vaults, _ := facotryInstance.Vaults(&bind.CallOpts{}, big.NewInt(i)) myPrintln(i+1, \" of \", count) myPrintln(\"strategy:\", vaults.Strategy) myPrintln(\"vault:\", vaults.Vault) stat, _ := facotryInstance.GetStat(&bind.CallOpts{}, vaults.Strategy, vaults.Vault) myPrintln(\"stat:\", stat) } TECH DETAILS Compile contracts: ViaVault.sol, VaultStrategy.sol, VaultFactory.sol, VaultDeployer.sol, StrategyDeployer.sol Interface: IViaVault.sol, IStrategy.sol, IVaultFactory.sol, IDeployer.sol Files to modify when changes need to re-deploy. changes in passing parameter to constructor. make sure to check all files above to make proper change accordingly. . Compile and Deploy: solc --optimize --overwrite --abi VaultFactory.sol -o ../build solc --optimize --overwrite --bin VaultFactory.sol -o ../build solc --optimize --overwrite --abi VaultStrategy.sol -o ../build solc --optimize --overwrite --bin VaultStrategy.sol -o ../build solc --optimize --overwrite --abi ViaVault.sol -o ../build solc --optimize --overwrite --bin ViaVault.sol -o ../build abigen --abi=../build/ViaVault.abi --bin=../build/ViaVault.bin --pkg=api --out=../deploy/ViaVault/ViaVault.go abigen --abi=../build/VaultFactory.abi --bin=../build/VaultFactory.bin --pkg=api --out=../deploy/VaultFactory/VaultFactory.go abigen --abi=../build/VaultStrategy.abi --bin=../build/VaultStrategy.bin --pkg=api --out=../deploy/VaultStrategy/VaultStrategy.go solc --optimize --overwrite --abi StratDeployer.sol -o ../build solc --optimize --overwrite --bin StratDeployer.sol -o ../build abigen --abi=../build/StratDeployer.abi --bin=../build/StratDeployer.bin --pkg=api --out=../deploy/StratDeployer/StratDeployer.go solc --optimize --overwrite --abi VaultDeployer.sol -o ../build solc --optimize --overwrite --bin VaultDeployer.sol -o ../build abigen --abi=../build/VaultDeployer.abi --bin=../build/VaultDeployer.bin --pkg=api --out=../deploy/VaultDeployer/VaultDeployer.go TroubleShooting. FactoryVault() fail. try deploy by the deployer separatedly to nail down whether its the Vault or Strategy Failed. index.go `project.DeployVaultByDeployer()` `project.DeployStratByDeployer()` Deploy Contracts Solidity: VaultDeployer.sol StrategyDeployer.sol VaultFactory.sol ViaVault.sol go: /scripts/index.go -- go file project.DeployVaultDeployer() -- deploy the vault Deployer project.DeployStratDeployer() -- deploy the strategy Deployer project.DeployVaultFactory() -- Deploy factory project.FactoryVault() -- Call factory.method.createVault() from web3js or -- go client to deploy Strategy and Vault through its deployer -- Check Status and Change Status s := project.Network.VaultStrat v := project.Network.Vault project.ChangeStat(s, v, 1) project.GetStat(s, v) GAS COST Estimation \u5206\u522bdeploy Transaction Fee: ViaVault Transaction Fee: 0.004369686 Ether Gas Price: 0.000000002 Ether (2 Gwei) VaultStrategy Transaction Fee: 0.008336874 Ether Gas Price: 0.000000002 Ether (2 Gwei) Deploy within SmartContract STRATEGY + VAULT STRATEGY + VAULT Transaction Fee: 0.012671544 Ether ($0.00) Gas Price: 0.000000002 Ether (2 Gwei) \u524d\u7aef Web","title":"Scripts"},{"location":"scripts/#deploy-vault","text":"call factory contract to generate two smart contracts -- strategy address -- vault address go script: parameters: contracts[10] -- 10 contract addresses see below vaultCap -- vault tvl limit in USD or USDC individualCap -- individual capacity in USD or USDC uniPortionRate -- uniswap v3 portion rate, 0 - 100 compPortionRate -- compound PortionRate , 0 - 100 creatorFee -- fee cut for creator feetier -- uniswap pool feetier quoteAmount -- 1 token0 in its decimal. i.e. if token0 is weth, 1e18 is the value _stratategyDeployer := Cfg.STRAT_DEPLOYER -- previously deployed by stratDeployer() _vaultDeployer := Cfg.VAULT_DEPLOYER -- previously deployed by vaultDeplyer() contracts := [10]common.Address{ protocolAddr, // an address that will take the protocol fees reserve, WETH, CETH, CTOKEN0, CTOKEN1, TokenA, TokenB, _stratategyDeployer, _vaultDeployer, } smart contract method to generate the vault and strategy: go: factoryContract.CreateVault(Auth, contracts, vaultCap, individualCap, uniPortionRate, compPortionRate, creatorFee, feetier, quoteAmount )","title":"Deploy vault"},{"location":"scripts/#view-vaults-registery","text":"solidity: VaultFactory.sol: struct VaultReg { address strategy; address vault; } VaultReg[] public vaults; go: func ViewVaults() count, _ := facotryInstance.GetCount(&bind.CallOpts{}) i := count.Int64() for i > 0 { i-- vaults, _ := facotryInstance.Vaults(&bind.CallOpts{}, big.NewInt(i)) myPrintln(i+1, \" of \", count) myPrintln(\"strategy:\", vaults.Strategy) myPrintln(\"vault:\", vaults.Vault) stat, _ := facotryInstance.GetStat(&bind.CallOpts{}, vaults.Strategy, vaults.Vault) myPrintln(\"stat:\", stat) }","title":"View vaults registery"},{"location":"scripts/#tech-details","text":"","title":"TECH DETAILS"},{"location":"scripts/#compile-contracts","text":"ViaVault.sol, VaultStrategy.sol, VaultFactory.sol, VaultDeployer.sol, StrategyDeployer.sol Interface: IViaVault.sol, IStrategy.sol, IVaultFactory.sol, IDeployer.sol Files to modify when changes need to re-deploy. changes in passing parameter to constructor. make sure to check all files above to make proper change accordingly. . Compile and Deploy: solc --optimize --overwrite --abi VaultFactory.sol -o ../build solc --optimize --overwrite --bin VaultFactory.sol -o ../build solc --optimize --overwrite --abi VaultStrategy.sol -o ../build solc --optimize --overwrite --bin VaultStrategy.sol -o ../build solc --optimize --overwrite --abi ViaVault.sol -o ../build solc --optimize --overwrite --bin ViaVault.sol -o ../build abigen --abi=../build/ViaVault.abi --bin=../build/ViaVault.bin --pkg=api --out=../deploy/ViaVault/ViaVault.go abigen --abi=../build/VaultFactory.abi --bin=../build/VaultFactory.bin --pkg=api --out=../deploy/VaultFactory/VaultFactory.go abigen --abi=../build/VaultStrategy.abi --bin=../build/VaultStrategy.bin --pkg=api --out=../deploy/VaultStrategy/VaultStrategy.go solc --optimize --overwrite --abi StratDeployer.sol -o ../build solc --optimize --overwrite --bin StratDeployer.sol -o ../build abigen --abi=../build/StratDeployer.abi --bin=../build/StratDeployer.bin --pkg=api --out=../deploy/StratDeployer/StratDeployer.go solc --optimize --overwrite --abi VaultDeployer.sol -o ../build solc --optimize --overwrite --bin VaultDeployer.sol -o ../build abigen --abi=../build/VaultDeployer.abi --bin=../build/VaultDeployer.bin --pkg=api --out=../deploy/VaultDeployer/VaultDeployer.go TroubleShooting. FactoryVault() fail. try deploy by the deployer separatedly to nail down whether its the Vault or Strategy Failed. index.go `project.DeployVaultByDeployer()` `project.DeployStratByDeployer()`","title":"Compile contracts:"},{"location":"scripts/#deploy-contracts","text":"Solidity: VaultDeployer.sol StrategyDeployer.sol VaultFactory.sol ViaVault.sol go: /scripts/index.go -- go file project.DeployVaultDeployer() -- deploy the vault Deployer project.DeployStratDeployer() -- deploy the strategy Deployer project.DeployVaultFactory() -- Deploy factory project.FactoryVault() -- Call factory.method.createVault() from web3js or -- go client to deploy Strategy and Vault through its deployer -- Check Status and Change Status s := project.Network.VaultStrat v := project.Network.Vault project.ChangeStat(s, v, 1) project.GetStat(s, v)","title":"Deploy Contracts"},{"location":"scripts/#gas-cost-estimation","text":"","title":"GAS COST Estimation"},{"location":"scripts/#deploy-transaction-fee","text":"ViaVault Transaction Fee: 0.004369686 Ether Gas Price: 0.000000002 Ether (2 Gwei) VaultStrategy Transaction Fee: 0.008336874 Ether Gas Price: 0.000000002 Ether (2 Gwei)","title":"\u5206\u522bdeploy Transaction Fee:"},{"location":"scripts/#deploy-within-smartcontract-strategy-vault","text":"STRATEGY + VAULT Transaction Fee: 0.012671544 Ether ($0.00) Gas Price: 0.000000002 Ether (2 Gwei)","title":"Deploy within SmartContract STRATEGY + VAULT"},{"location":"scripts/#web","text":"","title":"\u524d\u7aef Web"},{"location":"terms/","text":"TERMS VLT0 - ERC20 receipt for the shares deposited to the vault shares - A number that reflects total deposits of a pair of tokens. totalSupply - total shares in the vault.","title":"TERMS"},{"location":"terms/#terms","text":"VLT0 - ERC20 receipt for the shares deposited to the vault shares - A number that reflects total deposits of a pair of tokens. totalSupply - total shares in the vault.","title":"TERMS"},{"location":"test/","text":"Festures to test Test Deploy 1. from web / metamask: Deploy Factory Deploy Vault Deploy Strategy 2. from go admin index.go --deployStrategy & register Test Deposit Test Withdraw Test Rebalance Test Emergency","title":"Festures to test"},{"location":"test/#festures-to-test","text":"","title":"Festures to test"},{"location":"test/#test-deploy","text":"1. from web / metamask: Deploy Factory Deploy Vault Deploy Strategy 2. from go admin index.go --deployStrategy & register","title":"Test Deploy"},{"location":"test/#test-deposit","text":"","title":"Test Deposit"},{"location":"test/#test-withdraw","text":"","title":"Test Withdraw"},{"location":"test/#test-rebalance","text":"","title":"Test Rebalance"},{"location":"test/#test-emergency","text":"","title":"Test Emergency"},{"location":"versions/","text":"version 2.1 2021/12/05 version 2.0 strategy address -- vault address","title":"Versions"},{"location":"versions/#version-21","text":"2021/12/05","title":"version 2.1"},{"location":"versions/#version-20","text":"strategy address -- vault address","title":"version 2.0"}]}